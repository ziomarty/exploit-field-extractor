package it.mutinanet.exploitextractor;

/*
 * This class is part of the book "iText in Action - 2nd Edition"
 * written by Bruno Lowagie (ISBN: 9781935182610)
 * For more info, go to: http://itextpdf.com/examples/
 * This example only works with the AGPL version of iText.
 */

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.List;
import java.util.UUID;

import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.parser.PdfReaderContentParser;
import com.itextpdf.text.pdf.parser.SimpleTextExtractionStrategy;
import com.itextpdf.text.pdf.parser.TextExtractionStrategy;

public class ExtractPageContent {

	/**
	 * Parses a PDF to a plain text file.
	 * 
	 * @param pdf
	 *            the original PDF
	 * @param txt
	 *            the resulting text
	 * @throws IOException
	 */
	public static List<PdfFile> parsePdf(String pdf, String output_folder_path, String prefix) throws IOException {
		String emailFrom = "giada.zinelli@vighidoors.it";
		PdfFileType pdfFileType;

		if (pdf.contains("conferme_ordine_email")) {
			pdfFileType = PdfFileType.CONFERMA_ORDINE_EMAIL;
			if (pdf.contains("conferme_ordine_email_rita")) {
				emailFrom = "rita.iotti@vighidoors.it";
			} else if (pdf.contains("conferme_ordine_email_roberta")) {
				emailFrom = "roberta.zardi@vighidoors.it";
			} else if (pdf.contains("conferme_ordine_email_giuliana")) {
				emailFrom = "giuliana.loi@vighidoors.it";
			} else if (pdf.contains("conferme_ordine_email_giulia")) {
				emailFrom = "giulia.pavesi@vighidoors.it";
			} else {
				emailFrom = "silvia.carra@vighidoors.it";
			}

		} else if (pdf.contains("conferme_ordine_area_riservata")) {
			pdfFileType = PdfFileType.CONFERMA_ORDINE_AREA_RISERVATA;
		} else if (pdf.contains("fatture_email")) {
			pdfFileType = PdfFileType.FATTURA_EMAIL;
		} else
			pdfFileType = PdfFileType.FATTURA_AREA_RISERVATA;

		List<PdfFile> listOfFiles = new ArrayList<PdfFile>();
		PdfReader reader = new PdfReader(pdf);
		PdfReaderContentParser parser = new PdfReaderContentParser(reader);
		TextExtractionStrategy strategy;
		Deque<KeyValue> stack = new ArrayDeque<KeyValue>();
		int first = 1;
		for (int i = first; i <= reader.getNumberOfPages(); i++) {
			strategy = parser.processContent(i, new SimpleTextExtractionStrategy());
			String resultantText = strategy.getResultantText();
			// per stampare testo output
			// System.out.println(resultantText);
			try {
				List<KeyValue> keyValueList = Helper.parseKeyValue(resultantText);
				for (KeyValue keyValue : keyValueList) {
					// stack.push(keyValue);
					if (keyValue.getKey().equals("LAST")) {

						if (keyValue.getValue().equals("1")) {
							String email = "NOEMAIL";
							String cod_age = "NOCODAGE";
							String rag_sociale_age = "NONAME";
							String cod_cliente = "NOCODCLIENTE";
							String num = "NONUM";
							for (KeyValue kv : stack) {
								System.out.println("kv " + kv.getKey() + " - " + kv.getValue());
								if (kv.getKey().equals("RAG_SOC_AGE"))
									rag_sociale_age = kv.getValue().trim();
								if (kv.getKey().equals("NUM_FATT"))
									num = kv.getValue().trim();
								if (kv.getKey().equals("COD_AGE"))
									cod_age = kv.getValue().trim();
								if (kv.getKey().equals("EMAIL_FATT") && !kv.getValue().equals("no e-mail"))
									email = kv.getValue().trim();
								if (kv.getKey().equals("E_MAIL") && !kv.getValue().equals("no e-mail"))
									email = kv.getValue().trim();
								if (kv.getKey().equals("CODICE_CLIENTE"))
									cod_cliente = kv.getValue().trim();
								// CODICE_CLIENTE

							}
							String prefisso = prefix;
							System.out.println("PREFIX " + prefix);
							PdfFile pdfFile = new PdfFile();
							pdfFile.setCod_age(cod_age);
							pdfFile.setEmail(email);
							pdfFile.setId(num);
							pdfFile.setEmailFrom(emailFrom);
							pdfFile.setPdfFileType(pdfFileType);
							pdfFile.setCod_cliente(cod_cliente);
							// in caso di errore modifico il nome e invio
							// l'email al mittente
							// TODO verificare pdfFileType con campo email
							if (cod_age.equals("NOCODAGE") || num.equals("NONUMFATT")
									|| cod_cliente.equals("NOCODCLIENTE")
									|| (email.equals("NOEMAIL") && (pdfFileType.equals(PdfFileType.FATTURA_EMAIL)
											|| pdfFileType.equals(PdfFileType.CONFERMA_ORDINE_EMAIL)))

							) {
								prefisso = "_ERRORE_" + prefix + "_" + UUID.randomUUID() + "_";
								pdfFile.setPdfFileType(pdfFileType.ERRORE);
								pdfFile.setEmail(emailFrom);
							}

							String outPutFileName = output_folder_path + "/" + prefisso + "_" + num + "_" + cod_cliente
									+ "_" + cod_age + ".pdf";

							pdfFile.setFileName(outPutFileName);

							PdfHelper.splitPDF(reader, outPutFileName, first, i);
							listOfFiles.add(pdfFile);
							first = i + 1;
						}

						stack.clear();
					} else {
						stack.push(keyValue);
					}
				}
			} catch (ParsingException e) {
				;
			}
		}
		reader.close();
		return listOfFiles;
	}
}