package it.mutinanet.exploitextractor;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.UUID;

import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.core.appender.ConsoleAppender;
import org.apache.logging.log4j.core.appender.FileAppender;
import org.apache.logging.log4j.core.layout.PatternLayout;

public class Main_vighi {
	private static String conferma_ordine_email = "conferme_ordine_email";
	private static String conferma_ordine_area_riservata = "conferme_ordine_area_riservata";
	private static String fatture_area_riservata = "fatture_area_riservata";
	private static String fatture_email = "fatture_email";
	private static String output_suffix = "/output";
	private static String log_suffix = "/log";
	private static String html_suffix = "/html";
	private static String scratch_suffix = "/scratch";
	private static String exploitData_suffix = "/exploit_data";

	/**
	 * Main method.
	 * 
	 * @param args
	 *            no arguments needed
	 * @throws IOException
	 * @throws InterruptedException
	 */
	public static void main(String[] args) throws IOException, InterruptedException {
		Properties prop = new Properties();

		InputStream input = null;

		try {

			input = new FileInputStream("/config.properties");
			prop.load(input);

			// logging

			// load a properties file

			// get the property value and print it out

			// System.out.println(prop.getProperty("input_folder_path"));
			// System.out.println(prop.getProperty("output_folder_path"));
			// System.out.println(prop.getProperty("ftp_host"));
			// System.out.println(prop.getProperty("ftp_username"));
			// System.out.println(prop.getProperty("ftp_password"));
			// System.out.println(prop.getProperty("ftp_folder"));
			// System.out.println(prop.getProperty("smtp_host"));
			// System.out.println(prop.getProperty("smtp_sender_email_address"));

		} catch (IOException ex) {
			ex.printStackTrace();
		} finally {
			if (input != null) {
				try {
					input.close();
				} catch (IOException e) {
					e.printStackTrace();
					System.exit(-1);
				}
			}
		}
		final String root_folder_path = prop.getProperty("root_folder_path");
		final String ftp_host = prop.getProperty("ftp_host");
		final String ftp_user = prop.getProperty("ftp_username");
		final String ftp_password = prop.getProperty("ftp_password");
		final String ftp_folder = prop.getProperty("ftp_folder");
		final String smtp_host = prop.getProperty("smtp_host");
		final String smtp_sender_email = prop.getProperty("smtp_sender_email_address");
		// configuring logging
		// FileAppender fa = new FileAppender();
		// fa.setName("FileLogger");
		Date now = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yy_MM_dd__HH_mm_ss_S");
		String date = sdf.format(now);
		// String date = new Date().toString();
		String logFileName = root_folder_path + log_suffix + "/" + "Log_" + date + ".log";
		// fa.setImmediateFlush(true);
		// fa.setFile(logFileName);
		// fa.setLayout(new PatternLayout("%d %-5p [%c{1}] %m%n"));
		// fa.setThreshold(Level.DEBUG);
		// fa.setAppend(true);
		// fa.activateOptions();

		// ConsoleAppender consoleAppender = new ConsoleAppender();
		// Logger.getRootLogger().addAppender(fa);
		// Logger.getRootLogger().addAppender(consoleAppender);
		// Logger logger = Logger.getRootLogger();

		List<PdfFile> fileToElaborate = new ArrayList<PdfFile>();

		File exploit_data_directory = new File(root_folder_path + exploitData_suffix);

		File scratchFolder = new File(root_folder_path + scratch_suffix);
		File currentScratchFolder = new File(
				scratchFolder.getAbsolutePath() + "/" + System.currentTimeMillis() + "_" + UUID.randomUUID());
		File currentTempFolder = new File(currentScratchFolder.getAbsolutePath() + "/temp");
		currentTempFolder.mkdirs();

		Map<String, Long> fileToEvaluate = new HashMap<String, Long>();
		File[] listOfFiles = exploit_data_directory.listFiles();
		for (int i = 0; i < listOfFiles.length; i++) {
			File files = listOfFiles[i];
			if (files.isFile()) {

				String shortFileName = files.getName();
				if (shortFileName.endsWith("pdf")) {
					fileToEvaluate.put(files.getAbsolutePath(), files.length());
					files.renameTo(new File(currentTempFolder.getAbsoluteFile() + "/" + files.getName()));

				}
			}
		}

		// Thread.sleep(5000);
		// for (String fileName : fileToEvaluate.keySet()) {
		// File currentFile = new File(fileName);
		//
		// }

		File[] listOfReadyFiles = currentTempFolder.listFiles();

		for (int i = 0; i < listOfReadyFiles.length; i++) {

			File files = listOfReadyFiles[i];
			if (files.isFile()) {
				String shortFileName = files.getName();
				String canonicalFileName = files.getCanonicalPath();
				// logger.info("Elaborazione file " + shortFileName);
				// file pdf
				if (shortFileName.endsWith("pdf")) {
					System.out.println(canonicalFileName);
					// file fatture
					if (shortFileName.startsWith(fatture_email)) {
						File outputFolderFattureEmail = new File(
								currentScratchFolder.getAbsolutePath() + "/" + fatture_email);
						outputFolderFattureEmail.mkdir();
						List<PdfFile> confermaOrdineAreaRiservataFiles = ExtractPageContent.parsePdf(canonicalFileName,
								outputFolderFattureEmail.getAbsolutePath(), "fattura");
						fileToElaborate.addAll(confermaOrdineAreaRiservataFiles);
					} else if (shortFileName.startsWith(fatture_area_riservata)) {
						File outputFolderFattureEmail = new File(
								currentScratchFolder.getAbsolutePath() + "/" + fatture_area_riservata);
						outputFolderFattureEmail.mkdir();
						List<PdfFile> confermaOrdineAreaRiservataFiles = ExtractPageContent.parsePdf(canonicalFileName,
								outputFolderFattureEmail.getAbsolutePath(), "fattura");
						fileToElaborate.addAll(confermaOrdineAreaRiservataFiles);
					} else if (shortFileName.startsWith(conferma_ordine_email)) {
						System.out.println(conferma_ordine_email);
						File outputFolderFattureEmail = new File(
								currentScratchFolder.getAbsolutePath() + "/" + conferma_ordine_email);
						outputFolderFattureEmail.mkdir();
						List<PdfFile> confermaOrdineAreaRiservataFiles = ExtractPageContent.parsePdf(canonicalFileName,
								outputFolderFattureEmail.getAbsolutePath(), "conferma_ordine");
						fileToElaborate.addAll(confermaOrdineAreaRiservataFiles);

					} else if (shortFileName.startsWith(conferma_ordine_area_riservata)) {
						System.out.println(conferma_ordine_area_riservata);
						File outputFolderFattureEmail = new File(
								currentScratchFolder.getAbsolutePath() + "/" + conferma_ordine_area_riservata);
						outputFolderFattureEmail.mkdir();
						List<PdfFile> confermaOrdineAreaRiservataFiles = ExtractPageContent.parsePdf(canonicalFileName,
								outputFolderFattureEmail.getAbsolutePath(), "conferma_ordine");
						fileToElaborate.addAll(confermaOrdineAreaRiservataFiles);
					}
				}

			}
		}

		elaborateFiles(fileToElaborate, root_folder_path, smtp_host, ftp_host, ftp_user, ftp_password, ftp_folder);
		// logger.info("INVIO FILE DI LOG");
		EmailUtils.sendEmail("ziomarty@gmail.com", "ziomarty@gmail.com", smtp_host,
				"Vighi - Invio File Log Elaborazione", logFileName);
	}

	private static void elaborateFiles(List<PdfFile> fileToElaborate, final String root_folder_path,
			final String smtp_host, final String ftp_host, final String ftp_user, final String ftp_password,
			final String ftp_folder) throws IOException {
		for (PdfFile file : fileToElaborate) {
			// System.out.println(j + " " + file.toString());

			if (file.getPdfFileType() == PdfFileType.CONFERMA_ORDINE_AREA_RISERVATA) {
				System.out.println(PdfFileType.CONFERMA_ORDINE_AREA_RISERVATA + " " + file.toString());
				FtpUpload.Upload(ftp_host, ftp_user, ftp_password, new File(file.getFileName()), ftp_folder + "/ac");
			} else if (file.getPdfFileType() == PdfFileType.CONFERMA_ORDINE_EMAIL) {
				System.out.println(
						PdfFileType.CONFERMA_ORDINE_EMAIL + " " + file.toString() + " FOLDER " + ftp_folder + "/ac");

				EmailUtils.sendEmailWithAttachment(file.getEmail(), file.getEmailFrom(), smtp_host,
						new File(file.getFileName()),
						"Vighi Invio Conferma Ordine " + file.getId() + " " + file.getCod_age(),
						root_folder_path + html_suffix + "/conferme_ordine.html",
						new File(root_folder_path + html_suffix + "/vighi.png"));

				FtpUpload.Upload(ftp_host, ftp_user, ftp_password, new File(file.getFileName()), ftp_folder + "/ac");
			} else if (file.getPdfFileType() == PdfFileType.FATTURA_AREA_RISERVATA) {
				System.out.println(PdfFileType.FATTURA_AREA_RISERVATA + " " + file.toString());
				FtpUpload.Upload(ftp_host, ftp_user, ftp_password, new File(file.getFileName()), ftp_folder + "/aa");
			} else if (file.getPdfFileType() == PdfFileType.FATTURA_EMAIL) {
				System.out.println(PdfFileType.FATTURA_EMAIL + " " + file.toString());
				EmailUtils.sendEmailWithAttachment(file.getEmail(), file.getEmailFrom(), smtp_host,
						new File(file.getFileName()),
						"Vighi-Invio Fattura " + file.getId() + " " + file.getCod_cliente() + " " + file.getCod_age(),
						root_folder_path + html_suffix + "/fatture.html",
						new File(root_folder_path + html_suffix + "/vighi.png"));
			} else {
				System.out.println(PdfFileType.ERRORE + " " + file.toString());
				EmailUtils.sendEmailWithAttachment("luca@mutinanet.com", file.getEmailFrom(), smtp_host,
						new File(file.getFileName()), "ERRORE NELL'INVIO FILE ",
						root_folder_path + html_suffix + "/errore.html",
						new File(root_folder_path + html_suffix + "/vighi.png"));
			}
		}
	}

}
